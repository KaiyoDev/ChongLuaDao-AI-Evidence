// background.js
console.log("Background script loaded");

// ===== Helpers =====
const API_UPLOAD = "https://chongluadao.vn/api/upload-image";

const nowIso = () => new Date().toISOString();
const dataUrlToBase64 = (d) => d.split(",")[1];

// N√©n ·∫£nh ƒë·ªÉ tr√°nh l·ªói 413 (Payload Too Large)
async function compressImage(dataUrl, maxWidth = 1200, quality = 0.7) {
  const response = await fetch(dataUrl);
  const blob = await response.blob();
  const bitmap = await createImageBitmap(blob);
  
  // T√≠nh to√°n k√≠ch th∆∞·ªõc m·ªõi
  let { width, height } = bitmap;
  if (width > maxWidth) {
    height = (height * maxWidth) / width;
    width = maxWidth;
  }
  
  const canvas = new OffscreenCanvas(width, height);
  const ctx = canvas.getContext("2d");
  ctx.drawImage(bitmap, 0, 0, width, height);
  
  const compressedBlob = await canvas.convertToBlob({ 
    type: "image/jpeg", 
    quality 
  });
  
  const arrayBuffer = await compressedBlob.arrayBuffer();
  const bytes = new Uint8Array(arrayBuffer);
  let binary = '';
  for (let i = 0; i < bytes.byteLength; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return btoa(binary);
}

// T·∫°o b√°o c√°o m·∫´u ƒë·ªÉ copy
function generateReportText(aiData, urls) {
  const riskLevel = aiData.risk || 0;
  let riskText = "üü¢ An to√†n";
  if (riskLevel >= 8) riskText = "üî¥ C·ª±c k·ª≥ nguy hi·ªÉm";
  else if (riskLevel >= 6) riskText = "üü† Nguy hi·ªÉm cao"; 
  else if (riskLevel >= 3) riskText = "üü° C·∫ßn th·∫≠n tr·ªçng";

  const findings = (aiData.findings || []).map(f => `‚Ä¢ ${f}`).join('\n');
  const timestamp = new Date().toLocaleString('vi-VN');
  
  return `üö® B√ÅO C√ÅO PH√ÅT HI·ªÜN L·ª™A ƒê·∫¢O

üìã T√ìM T·∫ÆT: ${aiData.summary || 'C√≥ v·∫ª nguy hi·ªÉm'}
‚ö†Ô∏è M·ª®C R·ª¶I RO: ${riskLevel}/10 - ${riskText}
üåê URL: ${aiData.url || ''}

üîç C√ÅC D·∫§U HI·ªÜU PH√ÅT HI·ªÜN:
${findings || '‚Ä¢ Kh√¥ng c√≥ d·∫•u hi·ªáu c·ª• th·ªÉ'}

üìù B·∫∞NG CH·ª®NG CHI TI·∫æT:
${aiData.evidence_text || 'C·∫ßn ki·ªÉm tra th√™m'}

üì∏ H√åNH ·∫¢NH B·∫∞NG CH·ª®NG:
‚Ä¢ ·∫¢nh g·ªëc: ${urls.original || 'L·ªói upload'}
‚Ä¢ ·∫¢nh ph√¢n t√≠ch: ${urls.annotated || 'L·ªói upload'}

‚è∞ TH·ªúI GIAN PH√ÇN T√çCH: ${timestamp}
ü§ñ PH√ÇN T√çCH B·ªûI: ChongLuaDao AI Evidence v1.0

---
‚ö†Ô∏è L∆ØU √ù: B√°o c√°o n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi AI. H√£y th·∫≠n tr·ªçng v√† ki·ªÉm tra k·ªπ tr∆∞·ªõc khi th·ª±c hi·ªán giao d·ªãch.
üõ°Ô∏è B·∫£o v·ªá b·∫£n th√¢n kh·ªèi l·ª´a ƒë·∫£o: https://chongluadao.vn`;
}

// Upload ·∫£nh (JSON payload: { image: <base64>, filename })
async function uploadImageJSON({ base64, filename, headers = {} }) {
  const res = await fetch(API_UPLOAD, {
    method: "POST",
    headers: { "Content-Type": "application/json", ...headers },
    body: JSON.stringify({ image: base64, filename })
  });
  if (!res.ok) throw new Error(`Upload failed ${res.status}`);
  return res.json();
}

// Ch·ª•p m√†n h√¨nh tab ƒëang hi·ªÉn th·ªã
async function captureVisible() {
  return await chrome.tabs.captureVisibleTab(undefined, { format: "png" }); // dataURL
}

// L·∫•y ng·ªØ c·∫£nh trang (ƒë·ªÉ g·ª≠i k√®m cho Gemini)
async function getPageContext(tabId) {
  const [{ result }] = await chrome.scripting.executeScript({
    target: { tabId },
    func: () => {
      const html = document.documentElement.outerHTML.slice(0, 600000);
      const text = (document.body?.innerText || "").slice(0, 6000);
      return {
        url: location.href,
        domain: location.hostname,
        title: document.title,
        html_snippet: html,
        page_text: text,
        ua: navigator.userAgent,
        ts: new Date().toISOString(),
        dpr: devicePixelRatio || 1,
        viewport: { w: innerWidth, h: innerHeight, sx: scrollX, sy: scrollY }
      };
    }
  });
  return result;
}

// V·∫Ω ch√∫ th√≠ch d·ª±a tr√™n b√°o c√°o AI (panel + boxes)
async function annotateWithAI(dataUrl, report) {
  // T·∫°o ImageBitmap thay v√¨ Image (t∆∞∆°ng th√≠ch Manifest V3)
  const response = await fetch(dataUrl);
  const imageBlob = await response.blob();
  const img = await createImageBitmap(imageBlob);

  // OffscreenCanvas: chu·∫©n Manifest V3
  const canvas = new OffscreenCanvas(img.width, img.height);
  const ctx = canvas.getContext("2d");
  ctx.drawImage(img, 0, 0);

  // Panel th√¥ng tin
  const pad = 24, panelW = Math.min(760, img.width - pad*2), panelH = 240;
  ctx.globalAlpha = 0.85; 
  ctx.fillStyle = "#000";
  ctx.fillRect(pad, pad, panelW, panelH);
  ctx.globalAlpha = 1; 
  ctx.fillStyle = "#fff";

  // Ti√™u ƒë·ªÅ ch√≠nh
  ctx.font = "bold 24px system-ui, sans-serif";
  ctx.fillText(report.summary || "C√≥ v·∫ª nguy hi·ªÉm", pad+14, pad+38);

  // Risk score
  ctx.font = "18px system-ui, sans-serif";
  const riskTxt = typeof report.risk === "number" ? `R·ªßi ro: ${report.risk}/10` : "R·ªßi ro: ?";
  ctx.fillText(riskTxt, pad+14, pad+66);

  // URL v√† th·ªùi gian
  ctx.font = "14px system-ui, sans-serif";
  ctx.fillText(`URL: ${(report.url||"").slice(0,100)}`, pad+14, pad+90);
  ctx.fillText(`Th·ªùi gian: ${new Date().toLocaleString()}`, pad+14, pad+110);

  // Evidence text (n·∫øu c√≥)
  if (report.evidence_text) {
    ctx.fillText(`B·∫±ng ch·ª©ng: ${report.evidence_text.slice(0,90)}`, pad+14, pad+130);
  }

  // 3 ph√°t hi·ªán ƒë·∫ßu
  const findings = (report.findings || []).slice(0, 3);
  let y = pad+154;
  for (const f of findings) {
    const s = `‚Ä¢ ${f}`;
    ctx.fillText(s.length > 110 ? s.slice(0,107) + "..." : s, pad+14, y);
    y += 20;
  }

  // V·∫Ω boxes ƒë√°nh d·∫•u v√πng nguy hi·ªÉm
  const boxes = report.boxes || []; // [{x,y,w,h,label,score}]
  ctx.lineWidth = 3;
  for (const b of boxes) {
    // V·∫Ω khung m√†u v√†ng
    ctx.strokeStyle = "#ffd60a";
    ctx.strokeRect(b.x, b.y, b.w, b.h);
    
    // V·∫Ω label n·∫øu c√≥
    if (b.label) {
      const label = `${b.label}${b.score ? ` (${Math.round(b.score*100)}%)` : ""}`;
      const labelWidth = ctx.measureText(label).width + 10;
      
      // Background cho label
      ctx.globalAlpha = 0.9; 
      ctx.fillStyle = "#ffd60a";
      ctx.fillRect(b.x, Math.max(0, b.y-22), labelWidth, 20);
      
      // Text label
      ctx.globalAlpha = 1; 
      ctx.fillStyle = "#000"; 
      ctx.font = "bold 14px system-ui, sans-serif";
      ctx.fillText(label, b.x+5, Math.max(14, b.y-7));
    }
  }

  const outputBlob = await canvas.convertToBlob({ type: "image/jpeg", quality: 0.8 });
  
  // Chuy·ªÉn blob th√†nh base64 kh√¥ng d√πng FileReader (t∆∞∆°ng th√≠ch service worker)
  const arrayBuffer = await outputBlob.arrayBuffer();
  const bytes = new Uint8Array(arrayBuffer);
  let binary = '';
  for (let i = 0; i < bytes.byteLength; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return btoa(binary);
}

// L∆∞u l·ªãch s·ª≠ (t·ªëi ƒëa 300 entries)
async function pushHistory(entry) {
  const KEY = "analysis_history";
  const { [KEY]: list = [] } = await chrome.storage.local.get([KEY]);
  list.unshift(entry);
  await chrome.storage.local.set({ [KEY]: list.slice(0, 300) });
}

// ===== Gemini (Google Generative Language API) =====
function buildGeminiPrompt(context) {
  return `
B·∫°n l√† h·ªá th·ªëng ph√¢n t√≠ch l·ª´a ƒë·∫£o web/app chuy√™n nghi·ªáp. H√£y ƒë·ªçc h√¨nh ch·ª•p m√†n h√¨nh v√† ng·ªØ c·∫£nh trang ƒë·ªÉ ƒë√°nh gi√° r·ªßi ro v√† n√™u b·∫±ng ch·ª©ng chi ti·∫øt.

Y√äU C·∫¶U:
- Tr·∫£ v·ªÅ JSON **duy nh·∫•t**, kh√¥ng gi·∫£i th√≠ch th√™m.
- JSON schema ch√≠nh x√°c:

{
  "risk": <number from 0..10>,
  "summary": <string ng·∫Øn g·ªçn, v√≠ d·ª• "Trang l·ª´a ƒë·∫£o nguy hi·ªÉm">,
  "findings": [
    <m·∫£ng string: c√°c d·∫•u hi·ªáu l·ª´a ƒë·∫£o c·ª• th·ªÉ, t·ªëi ƒëa 12 m·ª•c, ti·∫øng Vi·ªát>
  ],
  "evidence_text": <string: m√¥ t·∫£ b·∫±ng ch·ª©ng ch√≠nh>,
  "boxes": [
    { "x": <number>, "y": <number>, "w": <number>, "h": <number>, "label": <string>, "score": <0..1> }
  ]
}

H∆Ø·ªöNG D·∫™N CH·∫§M ƒêI·ªÇM R·ª¶I RO:
- 0‚Äì2: ho√†n to√†n an to√†n, trang ch√≠nh th·ªëng
- 3‚Äì5: c√≥ m·ªôt s·ªë r·ªßi ro nh·ªè, c·∫ßn th·∫≠n tr·ªçng  
- 6‚Äì8: ƒë√°ng ng·ªù cao, nhi·ªÅu d·∫•u hi·ªáu l·ª´a ƒë·∫£o
- 9‚Äì10: c·ª±c k·ª≥ nguy hi·ªÉm, ch·∫Øc ch·∫Øn l·ª´a ƒë·∫£o

C√ÅC D·∫§U HI·ªÜU L·ª™A ƒê·∫¢O C·∫¶N T√åM:
1. C·ªù b·∫°c/c√° c∆∞·ª£c tr√°i ph√©p, casino online
2. V√≠ ti·ªÅn ƒëi·ªán t·ª≠/app ƒë·∫ßu t∆∞ l·∫° kh√¥ng r√µ ngu·ªìn g·ªëc
3. Form thu th·∫≠p th√¥ng tin nh·∫°y c·∫£m (OTP/m·∫≠t kh·∫©u/PIN/s·ªë th·∫ª)
4. M·∫°o danh ng√¢n h√†ng, s√†n TMDT, c∆° quan ch√≠nh ph·ªß
5. Y√™u c·∫ßu "x√°c minh t√†i kho·∫£n", "c·∫≠p nh·∫≠t th√¥ng tin"
6. Khuy·∫øn m√£i/qu√† t·∫∑ng qu√° h·∫•p d·∫´n, "nh·∫≠n th∆∞·ªüng ngay"
7. Script theo d√µi/m√£ ƒë·ªôc, code obfuscation (AES, base64)
8. Redirect t·∫£i app t·ª´ ngu·ªìn kh√¥ng an to√†n
9. Thu th·∫≠p IP/fingerprint qua b√™n th·ª© ba
10. Ng√¥n ng·ªØ t·∫°o FOMO, h·ª©a h·∫πn l√£i su·∫•t cao b·∫•t th∆∞·ªùng
11. Domain gi·∫£ m·∫°o, URL ƒë√°ng ng·ªù
12. Thi·∫øu th√¥ng tin ph√°p l√Ω, ch·ª©ng nh·∫≠n

B·ªêI C·∫¢NH TRANG:
URL: ${context.url}
Domain: ${context.domain}
Ti√™u ƒë·ªÅ: ${context.title}
User-Agent: ${context.ua}
Viewport: ${context.viewport?.w}x${context.viewport?.h}

N·ªòI DUNG TEXT TRANG:
${(context.page_text || "").slice(0, 2500)}

TR√çCH ƒêO·∫†N HTML:
${(context.html_snippet || "").slice(0, 5000)}

H√£y ph√¢n t√≠ch k·ªπ l∆∞·ª°ng v√† ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá theo schema tr√™n.`;
}

async function callGemini({ apiKey, model, imageBase64, context, endpointBase }) {
  const endpoint =
    (endpointBase || "https://generativelanguage.googleapis.com") +
    `/v1beta/models/${encodeURIComponent(model || "gemini-2.0-flash")}:generateContent?key=${encodeURIComponent(apiKey)}`;

  const body = {
    contents: [{
      role: "user",
      parts: [
        { text: buildGeminiPrompt(context) },
        { inlineData: { mimeType: "image/png", data: imageBase64 } }
      ]
    }],
    generationConfig: {
      temperature: 0.1,
      maxOutputTokens: 1500,
      responseMimeType: "application/json"
    }
  };

  const res = await fetch(endpoint, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body)
  });
  if (!res.ok) throw new Error(`Gemini HTTP ${res.status}: ${await res.text()}`);

  const data = await res.json();
  // L·∫•y text JSON t·ª´ candidates
  const txt =
    data?.candidates?.[0]?.content?.parts?.[0]?.text ??
    data?.candidates?.[0]?.content?.parts?.map(p => p.text).filter(Boolean).join("\n");

  if (!txt) throw new Error("Gemini: kh√¥ng c√≥ n·ªôi dung tr·∫£ v·ªÅ");

  // Parse JSON an to√†n
  let report;
  try {
    report = JSON.parse(txt);
  } catch {
    // Th·ª≠ g·ª° markdown wrapper
    const cleaned = txt.replace(/^```json\s*|\s*```$/g, "").trim();
    report = JSON.parse(cleaned);
  }

  // Validate v√† chu·∫©n h√≥a d·ªØ li·ªáu
  report.risk = typeof report.risk === "number" ? Math.max(0, Math.min(10, report.risk)) : 7;
  report.summary = report.summary || "C√≥ v·∫ª nguy hi·ªÉm";
  report.findings = Array.isArray(report.findings) ? report.findings : [];
  report.evidence_text = report.evidence_text || "";
  report.boxes = Array.isArray(report.boxes) ? report.boxes : [];

  return report;
}

// ===== Message router =====
chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
  (async () => {
    try {
      if (msg?.type === "RUN_CAPTURE_AND_ANALYZE") {
        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        const tabId = tab.id;

        const { apiHeaders = {}, geminiApiKey, geminiModel, geminiEndpointBase } =
          await chrome.storage.sync.get(["apiHeaders", "geminiApiKey", "geminiModel", "geminiEndpointBase"]);

        if (!geminiApiKey) throw new Error("Ch∆∞a c·∫•u h√¨nh Gemini API Key trong Options.");

        // 1) L·∫•y context v√† ch·ª•p m√†n h√¨nh
        const ctx = await getPageContext(tabId);
        const shotDataUrl = await captureVisible();
        const shotBase64 = dataUrlToBase64(shotDataUrl);

        // 2) G·ªçi Gemini ph√¢n t√≠ch
        let aiReport = await callGemini({
          apiKey: geminiApiKey,
          model: geminiModel || "gemini-2.0-flash",
          imageBase64: shotBase64,
          context: ctx,
          endpointBase: geminiEndpointBase
        });

        // 3) B·ªï sung th√¥ng tin
        aiReport.url = ctx.url;
        aiReport.capturedAt = nowIso();

        // 4) N√©n v√† upload ·∫£nh g·ªëc
        const compressedOriginal = await compressImage(shotDataUrl, 1200, 0.8);
        const upOriginal = await uploadImageJSON({
          base64: compressedOriginal,
          filename: `evidence_${Date.now()}.jpg`,
          headers: apiHeaders
        }).catch(e => ({ success: false, error: String(e) }));

        // 5) V·∫Ω ch√∫ th√≠ch v√† upload ·∫£nh c√≥ ch√∫ th√≠ch  
        const annotatedB64 = await annotateWithAI(shotDataUrl, aiReport);
        const upAnnotated = await uploadImageJSON({
          base64: annotatedB64,
          filename: `evidence_annotated_${Date.now()}.jpg`,
          headers: apiHeaders
        }).catch(e => ({ success: false, error: String(e) }));

        // 6) T·∫°o b√°o c√°o cu·ªëi c√πng
        const uploadUrls = {
          original: upOriginal.success ? upOriginal.link : upOriginal.error,
          annotated: upAnnotated.success ? upAnnotated.link : upAnnotated.error
        };
        
        const reportText = generateReportText(aiReport, uploadUrls);
        
        const report = {
          url: ctx.url,
          time: aiReport.capturedAt,
          ai: aiReport,
          uploads: { original: upOriginal, annotated: upAnnotated },
          reportText: reportText
        };

        // 7) L∆∞u v√†o l·ªãch s·ª≠
        await pushHistory(report);
        sendResponse({ ok: true, report });
      }

      if (msg?.type === "GET_HISTORY") {
        const { analysis_history = [] } = await chrome.storage.local.get(["analysis_history"]);
        sendResponse({ ok: true, history: analysis_history });
      }

      if (msg?.type === "CLEAR_HISTORY") {
        await chrome.storage.local.set({ analysis_history: [] });
        sendResponse({ ok: true });
      }
    } catch (error) {
      console.error("Background script error:", error);
      sendResponse({ ok: false, error: String(error) });
    }
  })();
  return true;
});
