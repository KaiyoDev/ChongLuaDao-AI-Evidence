// Result Page JavaScript
const $ = (selector) => document.querySelector(selector);
const $$ = (selector) => document.querySelectorAll(selector);

// Global variables
let currentReportData = null;
let currentReportText = "";
let currentTheme = localStorage.getItem('theme') || 'light';

// Theme Management
function initTheme() {
  document.documentElement.setAttribute('data-theme', currentTheme);
  updateThemeIcon();
}

function toggleTheme() {
  currentTheme = currentTheme === 'light' ? 'dark' : 'light';
  localStorage.setItem('theme', currentTheme);
  document.documentElement.setAttribute('data-theme', currentTheme);
  updateThemeIcon();
}

function updateThemeIcon() {
  const themeIcon = $('.theme-icon');
  if (themeIcon) {
    themeIcon.textContent = currentTheme === 'light' ? 'üåô' : '‚òÄÔ∏è';
  }
}

// Toast Notification System
function showToast(message, type = 'info', duration = 4000) {
  const container = $('#toastContainer');
  
  const toast = document.createElement('div');
  toast.className = `toast ${type}`;
  
  const typeIcons = {
    success: '‚úÖ',
    error: '‚ùå',
    warning: '‚ö†Ô∏è',
    info: '‚ÑπÔ∏è'
  };
  
  toast.innerHTML = `
    <div class="toast-header">
      <span class="toast-icon">${typeIcons[type] || typeIcons.info}</span>
      <span class="toast-title">${type.charAt(0).toUpperCase() + type.slice(1)}</span>
    </div>
    <div class="toast-message">${message}</div>
  `;
  
  container.appendChild(toast);
  
  // Auto remove toast
  setTimeout(() => {
    if (toast.parentNode) {
      toast.style.animation = 'slideOutRight 0.3s ease forwards';
      setTimeout(() => {
        container.removeChild(toast);
      }, 300);
    }
  }, duration);
}

// Utility functions
function formatRiskLevel(risk) {
  if (risk <= 2) return { text: "An to√†n", color: "#22c55e", icon: "üü¢", class: "low" };
  if (risk <= 5) return { text: "Th·∫≠n tr·ªçng", color: "#f59e0b", icon: "üü°", class: "medium" };
  if (risk <= 8) return { text: "Nguy hi·ªÉm", color: "#ef4444", icon: "üî¥", class: "high" };
  return { text: "C·ª±c nguy hi·ªÉm", color: "#dc2626", icon: "üö®", class: "critical" };
}

function formatDate(timestamp) {
  return new Date(timestamp).toLocaleString("vi-VN", {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// Load report data from URL parameters or storage
async function loadReportData() {
  try {
    // Try to get data from URL parameters first
    const urlParams = new URLSearchParams(window.location.search);
    const reportId = urlParams.get('id');
    
    if (reportId) {
      // Load from storage by ID
      const result = await chrome.storage.local.get(['analysis_history']);
      const history = result.analysis_history || [];
      const report = history.find((item, index) => index.toString() === reportId);
      
      if (report) {
        currentReportData = report;
        displayReport(report);
        return;
      }
    }
    
    // Try to get latest report
    const result = await chrome.storage.local.get(['latest_report']);
    if (result.latest_report) {
      currentReportData = result.latest_report;
      displayReport(result.latest_report);
    } else {
      showError("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu b√°o c√°o");
    }
  } catch (error) {
    console.error('Error loading report data:', error);
    showError("L·ªói khi t·∫£i d·ªØ li·ªáu b√°o c√°o");
  }
}

// Display report data
function displayReport(reportData) {
  const aiData = reportData.ai || {};
  
  // Update risk overview
  const riskInfo = formatRiskLevel(aiData.risk || 0);
  $('#riskIcon').textContent = riskInfo.icon;
  $('#riskLevel').textContent = `${aiData.risk || 0}/10`;
  $('#riskLabel').textContent = riskInfo.text;
  
  // Update meta info
  $('#analyzeUrl').textContent = reportData.url || 'Kh√¥ng c√≥ URL';
  $('#analyzeTime').textContent = formatDate(reportData.time);
  $('#findingsCount').textContent = `${(aiData.findings || []).length} d·∫•u hi·ªáu`;
  
  // Update content sections
  $('#summaryContent').textContent = aiData.summary || 'Kh√¥ng c√≥ t√≥m t·∫Øt';
  $('#evidenceContent').textContent = aiData.evidence_text || 'Kh√¥ng c√≥ b·∫±ng ch·ª©ng chi ti·∫øt';
  $('#technicalContent').textContent = aiData.technical_analysis || 'Kh√¥ng c√≥ ph√¢n t√≠ch k·ªπ thu·∫≠t';
  $('#recommendationContent').textContent = aiData.recommendation || 'Kh√¥ng c√≥ khuy·∫øn ngh·ªã';
  
  // Update findings list
  const findingsList = $('#findingsList');
  if (aiData.findings && aiData.findings.length > 0) {
    findingsList.innerHTML = aiData.findings.map((finding, index) => `
      <div class="finding-item">
        <div class="finding-number">${index + 1}</div>
        <div class="finding-text">${finding}</div>
      </div>
    `).join('');
  } else {
    findingsList.innerHTML = '<div class="no-findings">Kh√¥ng c√≥ d·∫•u hi·ªáu ƒë√°ng ng·ªù n√†o ƒë∆∞·ª£c ph√°t hi·ªán</div>';
  }
  
  // Update images grid
  const imagesGrid = $('#imagesGrid');
  const uploads = reportData.uploads || {};
  
  let imagesHTML = '';
  if (uploads.currentView?.link) {
    imagesHTML += `
      <div class="image-card">
        <h4>·∫¢nh viewport hi·ªán t·∫°i</h4>
        <a href="${uploads.currentView.link}" target="_blank" class="image-link">
          <span class="btn-icon">üñºÔ∏è</span>
          Xem ·∫£nh viewport
        </a>
      </div>
    `;
  }
  
  if (uploads.fullPage?.link) {
    imagesHTML += `
      <div class="image-card">
        <h4>·∫¢nh to√†n trang</h4>
        <a href="${uploads.fullPage.link}" target="_blank" class="image-link">
          <span class="btn-icon">üìÑ</span>
          Xem ·∫£nh to√†n trang
        </a>
      </div>
    `;
  }
  
  if (uploads.annotated?.link) {
    imagesHTML += `
      <div class="image-card">
        <h4>·∫¢nh ch√∫ th√≠ch b·∫±ng ch·ª©ng</h4>
        <a href="${uploads.annotated.link}" target="_blank" class="image-link">
          <span class="btn-icon">üéØ</span>
          Xem ·∫£nh ch√∫ th√≠ch
        </a>
      </div>
    `;
  }
  
  if (!imagesHTML) {
    imagesHTML = '<div class="no-images">Kh√¥ng c√≥ ·∫£nh b·∫±ng ch·ª©ng</div>';
  }
  
  imagesGrid.innerHTML = imagesHTML;
  
  // Store report text for copying
  currentReportText = reportData.reportText || generateReportText(reportData);
}

// Generate report text if not available
function generateReportText(reportData) {
  const aiData = reportData.ai || {};
  const riskInfo = formatRiskLevel(aiData.risk || 0);
  
  return `
üõ°Ô∏è B√ÅO C√ÅO PH√ÇN T√çCH CHUY√äN S√ÇU - CHONGLUADAO.VN

üìä TH√îNG TIN C∆† B·∫¢N:
üåê URL: ${reportData.url || 'Kh√¥ng c√≥'}
‚è∞ Th·ªùi gian: ${formatDate(reportData.time)}
‚ö†Ô∏è M·ª©c r·ªßi ro: ${aiData.risk || 0}/10 - ${riskInfo.text}

üìù T√ìM T·∫ÆT:
${aiData.summary || 'Kh√¥ng c√≥ t√≥m t·∫Øt'}

üîç C√ÅC D·∫§U HI·ªÜU PH√ÅT HI·ªÜN:
${(aiData.findings || []).map((finding, index) => `${index + 1}. ${finding}`).join('\n') || 'Kh√¥ng c√≥ d·∫•u hi·ªáu ƒë√°ng ng·ªù'}

üìã B·∫∞NG CH·ª®NG CHI TI·∫æT:
${aiData.evidence_text || 'Kh√¥ng c√≥ b·∫±ng ch·ª©ng chi ti·∫øt'}

‚öôÔ∏è PH√ÇN T√çCH K·ª∏ THU·∫¨T:
${aiData.technical_analysis || 'Kh√¥ng c√≥ ph√¢n t√≠ch k·ªπ thu·∫≠t'}

üí° KHUY·∫æN NGH·ªä:
${aiData.recommendation || 'Kh√¥ng c√≥ khuy·∫øn ngh·ªã'}

üì∏ B·∫∞NG CH·ª®NG H√åNH ·∫¢NH:
${reportData.uploads?.currentView?.link ? `- ·∫¢nh viewport: ${reportData.uploads.currentView.link}` : ''}
${reportData.uploads?.fullPage?.link ? `- ·∫¢nh to√†n trang: ${reportData.uploads.fullPage.link}` : ''}
${reportData.uploads?.annotated?.link ? `- ·∫¢nh ch√∫ th√≠ch: ${reportData.uploads.annotated.link}` : ''}

---
B√°o c√°o ƒë∆∞·ª£c t·∫°o b·ªüi ChongLuaDao AI Evidence Extension
  `.trim();
}

// Show error message
function showError(message) {
  const container = $('.result-full-container');
  container.innerHTML = `
    <div class="error-state">
      <div class="error-icon">‚ùå</div>
      <h3>C√≥ l·ªói x·∫£y ra</h3>
      <p>${message}</p>
      <button onclick="window.close()" class="primary-btn">
        <span class="btn-icon">‚Ü©Ô∏è</span>
        <div class="btn-content">
          <div class="btn-title">ƒê√≥ng tab</div>
        </div>
      </button>
    </div>
  `;
}

// Event Listeners
document.addEventListener('DOMContentLoaded', () => {
  initTheme();
  loadReportData();
  
  // Theme toggle
  $('#themeToggle').addEventListener('click', toggleTheme);
  
  // Copy full report
  $('#copyFullReport').addEventListener('click', async () => {
    try {
      if (currentReportText) {
        await navigator.clipboard.writeText(currentReportText);
        showToast("üìã ƒê√£ copy b√°o c√°o ƒë·∫ßy ƒë·ªß v√†o clipboard", "success");
      } else {
        showToast("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ copy", "error");
      }
    } catch (error) {
      showToast("‚ùå L·ªói khi copy b√°o c√°o", "error");
    }
  });
  
  // Fill form from result
  $('#fillFormFromResult').addEventListener('click', async () => {
    try {
      if (currentReportData) {
        const response = await chrome.runtime.sendMessage({
          type: "FILL_CHONGLUADAO_FORM",
          reportData: currentReportData
        });
        
        if (response.ok) {
          showToast("üìù ƒê√£ ƒëi·ªÅn form ChongLuaDao t·ª± ƒë·ªông", "success");
        } else {
          showToast("‚ö†Ô∏è " + (response.error || "Kh√¥ng th·ªÉ ƒëi·ªÅn form t·ª± ƒë·ªông"), "warning");
        }
      } else {
        showToast("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ƒëi·ªÅn form", "error");
      }
    } catch (error) {
      showToast("‚ùå L·ªói khi ƒëi·ªÅn form", "error");
    }
  });
  
  // Export PDF (placeholder)
  $('#exportPDF').addEventListener('click', () => {
    window.print();
  });
  
  // Back to popup
  $('#backToPopup').addEventListener('click', () => {
    window.close();
  });
  
  // Keyboard shortcuts
  document.addEventListener('keydown', (e) => {
    if (e.ctrlKey || e.metaKey) {
      switch (e.key) {
        case 'c':
          e.preventDefault();
          $('#copyFullReport').click();
          break;
        case 'p':
          e.preventDefault();
          $('#exportPDF').click();
          break;
        case 'w':
          e.preventDefault();
          window.close();
          break;
      }
    }
  });
});
